package gitlet;

import java.io.File;
import java.io.Serializable;
import java.util.*;
import static gitlet.Utils.*;

/**
 *  Key features:
 *      manage the satgearea, set tracked and untracked
 *
 *  Key functions:
 *      add:
 *      remove: set untracked
 *
 * Key points:
 *      File file = join('DIR',"filename")
 *      That is to say, as long as we know the path of the file, we can get the file object
 *      Then get the content through the Utils interface
 *
 *      When a file is updated to tracked, a new blob object of this file should be stored in /objects
 *      The file name comes from the hash BlobID, which is generated by the file (path) and content
 *
 *  Data models:
 *      added: Map<string, string>
 *          key: File:filepath
 *          value: SHA1 id
 *      tracked: Map<string, string>
 *          key: File:filepath -> content -> blob object
 *          value: SHA1 id
 *      removed: List[]<File>
 *
 */

public class StagedArea implements Serializable{
    /**
     * tracked indicates a tracked file. When commit is executed, commit stores this tracked file. All corresponding files can be found through tracked file.
     * added indicates a newly created or modified file (some files here belong to tracked file and some belong to unctracked file (equivalent to removed file))
     * removed indicates a file removed from tracked file, which means it will be ignored when committing.
     * is_modify_index Whenever an add operation is executed on a file, it is determined whether the operation do changes
        the index before the operation. If so, the stagearea object is written to the index.
     */
    private final Map<String, String> tracked = new HashMap<>();
    private final Map<String, String> added = new HashMap<>();
    private final Set<String> removed = new HashSet<>();
    private final String StageAreaID = "0";
    private boolean is_modify_index = false;

    public Map<String, String> getTracked() {
        return tracked;
    }

    public Map<String, String> getAdded() {
        return added;
    }

    public boolean get_is_modify_index() {
        return is_modify_index;
    }

    public void saveIndex(File file, StagedArea stagearea) {
        writeObject(file, (Serializable) stagearea);
    }

    /**
     * Processing the core logic of add
     * File copying to stagearea
     * a. Rewrite the file (modified, including file name or content)
     * b. Newly created file
     * c. If the file you want to add is already in the staging area, but the content of the file you want to add is
          the same as the file stored in the latest commit have not changed,
          Then executing the add operation will no make sense
     *
     * Tips: only the file differ from the one in commit can be added into stagearea
     */
    public void add(File file) {
        String filepath = file.getPath();

        Blob blob = new Blob(file);
        String blobid = blob.getid();
        added.put(filepath, blobid);
        blob.save();
        is_modify_index = true;
    }

    public void saveStageArea(File index) {
        writeObject(index, this);
    }


    /**
     * Process the core logic of commit
     * Update tracked:
     *      Add all key-value pairs of added to tracked
     *      Remove all key-value pairs of removed from tracked
     * Clear added
     * Clear removed
     *
     */
    public Map<String, String> commit() {
        for(Map.Entry<String, String> entry : added.entrySet()) {
            tracked.put(entry.getKey(), entry.getValue());
        }

        clear();
        return tracked;
    }

    private void clear() {
        added.clear();
        removed.clear();
    }

}
